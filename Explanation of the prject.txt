1- install react with typescript using the command ( npm create vite@latest front-end -- --template react-ts).

2- creating folders for (pages , components , types ....).

3- Deleting unused files.

4- creating github Repository for the project.

5- creating (ProductInfo) file for defining types of products informations inside the folder (tyes).


6- After finishing that we can create our products in data.ts.

7- then we can render the products to see them using the folowing function (
  {products.map((product) => (
    <img src={product.image} />
    <h2>{product.name}</h2>
  ))}
);

8- We need to install bootstrap for stylling by using the command 
(npm i bootstrap@latest -S).

9- Create routing for our app after installing react-router-dom.

10- Starting setUp our backend server by creating backend folder and head to it in the terminal to install express Using (npm install express & npm install -save-dev typescript ts-node-dev @types/express).

11- Install eslint by this command (npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin).

12- creating .eslint.js file for configuration for ESLint to check your TypeScript code based on some recommended rules and using the appropriate parser to understand your code and check your TypeScript code for potential issues and enforce coding style.

13- create tsconfig.json file for TypeScript configuration.

14- create the "src" folder which we will write our code in .

15- moving data.ts file and types folder from frontend to the backend inside src.

16- create route for geting data from backend (for "/api/products).

17- return products.

18- fetching products from the backend Api to do this we'll use axios, after installing axios in frontend we head to main.tsx in frontend where we need to config base URL for axios like this

axios.defaults.baseURL = 

 and then check the node environment like this 
 process.env.NODE_ENV === 'development' ? 'http:localhost:4000' : '/'; 
 we will get process error so we install types node.

19- defining types in the homePage : we use reducer hook to fetch data from backend so we need to define the initial state, Action, and state for reducer hook 

20- define get error function : but we need first to create types/ApiError.ts and utils.ts file that we define getError function inside.

21- Defining useReducer

22- Define useEffect to fetch data.

23- create LoadingBox component and MessageBox .

24- update return statement.

25- create rating and productitem componentØ³ to render products  in instead of HomePage that for the code of home screen modular
 
26- Change the page title in react application using helmet.

27- Adding ReactQuery to the project to manage asynchronous states and getting data from backend: 
 npm i @tanstack/react-query & npm i @tanstack/react-query-devtools 

28- after doing this we don't need to import axios and define base url in the main.ts file  and then wrap the app inside query client provider and passing query client as props which is an object from query client of react query 
and below the app we add div tools for react query and set initialIsOpen  to false 

29- after this we need to implement Api call by react query. by creating apiClient.ts in src folder and defining apiClient like that 
const apiClient = axios.create({ the rest of the code})

30- creating hooks for react query to send axios requests to the backend : first a new folder in src (hooks) and create a new file (productHooks) in it we create a hook to load all products from backend by writting this code 
const useGetProductsQuery = () => 
  useQuery({
    queryKey: ['products'],
    queryFn: async () => (await apiClient.get<ProductInfo[]>(`api/products`)).data,
  })

then we need to update our HomePage to use this hook.

31- It's time to create product page : first create an Api in the backend to return product informations by it's slug and then in the front end we create a hook using useQuery to get list of product details by slug and use it in the ProductPage to render the product details.

32- create react context to handle state throughout the application.
to do this we a create a store and define type for appstate and the initialstate and the reducer function, the defaultDispatch , store using React.creatteContext after this we go the main.ts and wrap the whole component inside Store.Proviser

and in the app.tsx we implement the function to use this hook.

33- create mongodb database and put mongodb url in .env
then : npm install dotenv mongoose @typegoose/typegoose.
and we need to define mongodb url using validatenv 

then connect mongoose to the url


34- creating product model and define the terms of every product.

35- creating a router for the products. 

36- we need to define a methods to get products and product by slug using router.get.

37- then we implement  app.use with the new router instead of the old one.

38- now we could fetch our products from our database but it's empty so let's add our products to it by implement router.post in the router file and use it in the index.ts.

39- implement add to cart buttons in the react constext

40- to do this first in the types folder we need to define some types object like cartItem and shippingAddress and Cart 

41- Creating cart object int application store then we need to define the initialState for the cart but first we need to check our localStorage before setting the initial value to empty array.

42- We need to define the action of add_cart_item and then define a case for addcartitem that increase the number of items in the cart then we save cart items in the localStorage 

43- then in the app.tsx we get the cart from the store and show it in the cart component

44- in the utils we define the Addproducttocart function which take the product and return a cartitem

45- and the then in the produstItem.tsx component at the very beginning use context we get the state and dispatch from the store and from the state we get cartItem and add it to the cart function which we define next and call it when pressing the add ot cart button.

46- implement add to cart in the product page : first get state and dispatch from usecontext hook  and get the cart from the state and we then we implement addToCartHandler function we will use Toastify for notifications 

47- installing react router bootstrap for creating link for component that we cannot set a link directly to them like navbar.brand for the logo for the app

48- implementing cart page: first create CartPage.tsx inside this file we create cartPage component and then we need to get access to navigate using navigatehook

49- Then we using useContext React hook we get the carItems list from the cart in the state 

50- Implementing updateCartHandler function

51- In the return part we put helmet for the page and create the heading and rendering the list of the cart items and adding buttons for updating the list of the cartItems and then create a card for subtotal.

52- Implementing the remove button to remove item from the cart: first create action type 'CART_REMOVE_ITEM' and create case for this in the reducer function which filter the cartItems to delete the particular item and implement a function in the cart page to dispatch this action when pressing the delete button.

53- create backend Api for user signin: 
first we create the user module

54- install bcrypt and create userController.ts to define signup and login requests

55- create a utility file for generatewebtoken

56- create a userRouter.ts to create router for userauthenticated requests

57- use the new router in the app.

58- it's time to create front end signin page first create a hook to call the signin Api in backend in userHooks.ts we need to define user terms types (create UserInfo.ts) 

59- Create sign in page: first we need to create a hook for user authentication
then create UserInfo.ts for defining types of user fields

60- It's time to use all this stuff in the SigninPage file.

61- Create a Status bar to show Checkout steps.

62- Creating Payment Page : first we need to implement a case for using payment method.

63- In pages forlder we create PaymentPage.tsx for defining payment method function.

64- It's time to create a backend Api for user order: first as usual we need to create order model. 

65- create a router for creating order api and we need to create a middleware to only allow authenticated user to access this api. 

66- use asyncHandler to create order in the backend

67- use the router in the index.ts